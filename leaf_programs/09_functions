// In leaf functions are first class citizens, they can be stored in variables, passed to other functions as arguments, returned by other functions as return values and they also support closure.



// Defining a function

const printHelloWorld = function () {
    println "Hello world, this is leaflang.";
};

printHelloWorld();



// Function with parameters

const printArgument = function (argument) {
    println argument;
};

printArgument("This function takes an argument and prints it");
printArgument("This function takes an" + " " + "argument and prints it");
printArgument(1024 * 10);
printArgument(true and false);



// Function that returns a value

const addArgs = function (num1, num2) {
    return num1 + num2;
};
println addArgs(10, 23.5);          // Prints 33.5
println addArgs("Hello", " World"); // Prints Hello World



// Storing a function in other variable

const addArguments = addArgs;
println addArguments(100, 200);



// Passing a function as argument to other functions

const performOperation = function (operation, a, b, c) {
    return operation(a, b, c);
};

const multiply = function (a, b, c) {
    return a * b * c;
};

println performOperation(multiply, 2, 3, 5);    // Prints 30



// Returning a function from other function

const getOperation = function (option) {
    if option == "+" {
        return function (a, b) { return a + b; };
    }
    elseif option == "-" {
        return function (a, b) { return a - b; };
    }
    elseif option == "*" {
        return function (a, b) { return a * b; };
    }
    elseif option == "/" {
        return function (a, b) { return a / b; };
    }
    elseif option == "%" {
        return function (a, b) { return a % b; };
    }
    elseif option == "**" {
        return function (a, b) { return a ** b; };
    }
    else {
        return function (a, b) { return "Invalid operation"; };
    }
};

const addOperation      = getOperation("+");
const subOperation      = getOperation("-");
const mulOperation      = getOperation("*");
const divOperation      = getOperation("/");
const modOperation      = getOperation("%");
const powOperation      = getOperation("**");
const invalidOperation  = getOperation("get me add +");

var arg1 = 10;
var arg2 = 15;

println addOperation(arg1, arg2);
println subOperation(arg1, arg2);
println mulOperation(arg1, arg2);
println divOperation(arg1, arg2);
println modOperation(arg1, arg2);
println powOperation(arg1, arg2);
println invalidOperation(arg1, arg2);



// Closure property
const getCounter = function (initialCount) {
    var count = initialCount;   // Returned function will remember this variable

    return function () {
        const result = count;
        count = count + 1;
        return result;
    };
};

const counter = getCounter(0);

println counter();  // Prints 0
println counter();  // Prints 1
println counter();  // Prints 2
println counter();  // Prints 3
println counter();  // Prints 4
println counter();  // Prints 5
